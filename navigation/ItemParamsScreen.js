import React, { useState, useContext, useEffect } from'react';
import { View, ScrollView, Text, Alert } from'react-native';
import { StackActions } from '@react-navigation/native';
import { Avatar, Input, Button } from'react-native-elements';
import { database, ref, get, push } from '../utils/Database';
import { styles }  from '../utils/Styles'
import { UserStateContext } from '../utils/UserContext';

export default function ItemParamsScreen({ route, navigation }) {

    const {user, setUser} = useContext(UserStateContext);
    const {name, groupId, listId} = route.params;

    const [item, setItem] = useState({
        name: name,
        img64: '',
        quantity: ''
    });
    const [loading, setLoading] = useState(false);
    const [imageLoading, setImageLoading] = useState(true);
    const [onSave, setOnSave] = useState(0);

    // Load autogenerated image
    useEffect(() => {
        

        fetch('https://serpapi.com/search.json?' 
            + 'q=' + name 
            + '&tbm=isch&ijn=0' 
            + '&api_key=445b7ccd968dbb847ec84a899ac77d37902d4da04382a8482aed88a4777b6d67')
            .then((response) => response.json())
                .then((json) => {
                    setItem({...item, img64: json['images_results'][0].thumbnail})
                    setImageLoading(false);

        })
        .catch((error) => {
            setImageLoading(false);
        });

        
    }, []);


    useEffect(() => {

        if(onSave > 0){

            const query = ref(database, 'Groups/' + groupId + '/lists/' + listId + '/items/'); 

            setLoading(true);

            push(query, item);

            navigation.dispatch(StackActions.pop(2));              
        }
    }, [onSave]);

     /// Header config
    useEffect(() => {

        navigation.setOptions({ 
            headerTitle: () => <Text style={styles.header}>{
            item.name == '' ? 
            "Choose a picture" : 
            item.name + "'s picture"}</Text>
        });
    });

    const ItemImage = () => {

        if(loading){

            return (
               <Avatar 
                    buttonStyle={styles.buttonValidate}
                    loading
                />
            );
        }
        else{
            return(
                <Avatar      
                    rounded               
                    size={300}
                    containerStyle={styles.adjustedTop}
                    source={
                        item.img64 == '' ? 
                        require("../utils/images/Unknown.png") : 
                        { uri: item.img64 }
                    }
                    onPress={() => navigation.navigate('Your profil picture', 
                        { 
                            header: item.name,
                            img64: item.img64,
                            onBack: (img64) => setItem({...item, img64: img64})
                        })}
                  /> 
            );
        }
    }

    const SaveButton = () => {

        if(loading){
            return (
                <Button
                    buttonStyle={styles.buttonValidate}
                    loading
                />
            );
        }
        else{
            return (
                <Button
                    buttonStyle={[styles.buttonValidate]}
                    title="Save"
                    onPress={() => {
                        setOnSave(onSave + 1);                       
                    }}
                />
            );
        }
    }

    if(imageLoading){
        return(
            <View style={styles.centeredView}>
                <Text style={styles.title}>Searching for {name} images</Text>
            </View>
        );
    }
    else {
        return (
 
            <ScrollView contentContainerStyle={styles.container}>   
    
                <ItemImage/>
    
                <Text style={[styles.title, styles.adjustedTop]}>Quantity</Text>
                <Input
                    value={item.quantity}
                    placeholder='Type in quantity'
                    textAlign='center'
                    onChangeText={(text) => setItem({...item, quantity: text})}
                />
    
                <View style={[styles.leftView, styles.adjustedTop]}>
    
                    <SaveButton/>
    
                </View>
    
            </ScrollView> 
            
    
        );
    }
};